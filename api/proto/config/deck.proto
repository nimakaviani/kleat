syntax = "proto3";
package proto.config;

option go_package = "github.com/spinnaker/kleat/api/client/config";

import "google/protobuf/wrappers.proto";

import "notification/bearychat.proto";
import "notification/email.proto";
import "notification/google_chat.proto";
import "notification/github_status.proto";
import "notification/pubsub.proto";
import "notification/slack.proto";
import "notification/twilio.proto";

message Deck {
  // The endpoint at which Deck communicates with Gate.
  string gateUrl = 1;

  // Whether authn is enabled.
  google.protobuf.BoolValue authEnabled = 2;

  // The Gate authn endpoint.
  string authEndpoint = 3;

  // Baking details URL used in Bake stage execution details.
  string bakeryDetailUrl = 4;

  // Configuration for the canary UI.
  Canary canary = 5;

  // Configuration for surfacing the Spinnaker changelog in Deck.
  Changelog changelog = 6;

  // Configuration for notifications providers.
  Notifications notifications = 7;

  // Configuration for cloud provider defaults.
  Providers providers = 8;

  // Spinnaker version.
  string version = 9;

  // Default time zone in which to display timestamps in the UI.
  string defaultTimeZone = 10;

  // Configuration for UI-related feature flags.
  Features feature = 11;

  ManagedDelivery managedDelivery = 12;

  // Configuration for UI-related feature flags.
  message Features {
    // Enable pipeline template support. Read more at
    // https://github.com/spinnaker/dcd-spec.
    google.protobuf.BoolValue pipelineTemplates = 1;

    // Enable canary UI support.
    google.protobuf.BoolValue canary = 2;

    // Enable Chaos Monkey support. For this to work, you'll need a running Chaos
    // Monkey deployment. See https://github.com/Netflix/chaosmonkey/wiki.
    google.protobuf.BoolValue chaosMonkey = 3;

    // Whether authz is enabled.
    google.protobuf.BoolValue fiatEnabled = 4;

    // Enable managed pipeline templates v2 UI support.
    google.protobuf.BoolValue managedPipelineTemplatesV2UI = 5;

    // Enable managed delivery
    google.protobuf.BoolValue managedDelivery = 6;

    // Enable managed delivery
    google.protobuf.BoolValue managedResources = 7;
  }

  message ManagedDelivery {
    string manifestBasePath = 1;
  }

  // Configuration for the canary UI.
  message Canary {
    // The default canary judge. Defaults to `NetflixACAJudge-v1.0`, which is
    // currently the only open-source judge available by default.
    string defaultJudge = 1;

    // Whether the canary UI is disabled.
    google.protobuf.BoolValue featureDisabled = 2;

    // Name of the canary metrics account to use by default.
    string metricsAccountName = 3;

    // Name of the metrics store to use by default (e.g., `prometheus`, `datadog`).
    string metricStore = 4;

    // Whether or not to show all canary configs in Deck, or just those scoped
    // to the current application.
    google.protobuf.BoolValue showAllConfigs = 5;

    // Name of storage account to use by default.
    string storageAccountName = 6;

    // Whether or not to enable custom filter templates for canary configs in
    // Deck.
    google.protobuf.BoolValue templatesEnabled = 7;
  }

  // Configuration for surfacing the Spinnaker changelog in Deck.
  // TODO: can we do one of the following?
  // 1. Change the component in Deck to fall back to just displaying
  // a link to the spinnaker.io versions page, bookmarked to correct version?
  // 2. Somehow derive the gist ID from the top-level version
  // without reaching out to the internet?
  message Changelog {
    // The Spinnaker changelog gist file name.
    string fileName = 1;

    // The Spinnaker changelog gist ID.
    string gistId = 2;
  }

  // Configuration for notifications providers.
  message Notifications {
    // Configuration for the BearyChat notification provider.
    notification.BearyChat bearychat = 1;

    // Configuration for the email notification provider.
    notification.Email email = 2;

    // Configuration for the GitHub Status notification provider.
    notification.GithubStatus githubStatus = 3;

    // Configuration for the Google Chat notification provider.
    notification.GoogleChat googleChat = 4;

    // Configuration for the Pub/Sub notification provider.
    notification.PubSub pubsub = 5;

    // Configuration for the Slack notification provider.
    notification.Slack slack = 6;

    // Configuration for the SMS notification provider.
    notification.Twilio sms = 7;
  }

  // UI-specific provider default settings.
  message Providers {
    // Appengine provider defaults.
    Appengine appengine = 1;

    // AWS provider defaults.
    Aws aws = 2;

    // Azure provider defaults.
    Azure azure = 3;

    // Cloudfoundry provider defaults.
    Cloudfoundry cloudfoundry = 4;

    // DC/OS provider defaults.
    Dcos dcos = 5;

    // ECS provider defaults.
    Ecs ecs = 6;

    // GCE provider defaults.
    Gce gce = 7;

    // Huawei Cloud provider defaults.
    HuaweiCloud huaweicloud = 8;

    // Tencent Cloud provider defaults.
    TencentCloud tencentcloud = 9;

    Kubernetes kubernetes = 10;

    message Appengine {
      Defaults defaults = 1;
      message Defaults {
        string account = 1;
      }
    }

    message Aws {
      Defaults defaults = 1;
      message Defaults {
        string account = 1;
        string region = 2;
      }
    }

    message Azure {
      Defaults defaults = 1;
      message Defaults {
        string account = 1;
        string region = 2;
      }
    }

    message Cloudfoundry {
      Defaults defaults = 1;
      message Defaults {
        string account = 1;
      }
    }

    message Dcos {
      Defaults defaults = 1;
      message Defaults {
        string account = 1;
      }
    }

    message Ecs {
      Defaults defaults = 1;
      message Defaults {
        string account = 1;
      }
    }

    message Gce {
      Defaults defaults = 1;
      message Defaults {
        string account = 1;
        string region = 2;
      }
    }

    message HuaweiCloud {
      Defaults defaults = 1;
      message Defaults {
        string account = 1;
        string region = 2;
      }
    }

    // TODO: add TencentCloud as a cloud provider so we can write
    // config to Deck and Clouddriver.
    message TencentCloud {
      Defaults defaults = 1;
      message Defaults {
        string account = 1;
        string region = 2;
      }
    }

    // The Kubernetes provider has no statically-configured defaults,
    // but Deck currently registers each cloud provider based on the existence
    // of an entry in the `providers` block.
    message Kubernetes {}
  }
}
