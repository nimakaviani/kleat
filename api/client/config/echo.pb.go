// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: config/echo.proto

package config

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	client "github.com/spinnaker/kleat/api/client"
	artifact "github.com/spinnaker/kleat/api/client/artifact"
	ci "github.com/spinnaker/kleat/api/client/ci"
	notification "github.com/spinnaker/kleat/api/client/notification"
	pubsub "github.com/spinnaker/kleat/api/client/pubsub"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Configuration for the echo microservice.
type Echo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slack        *notification.Slack        `protobuf:"bytes,1,opt,name=slack,proto3" json:"slack,omitempty"`
	Twilio       *notification.Twilio       `protobuf:"bytes,2,opt,name=twilio,proto3" json:"twilio,omitempty"`
	GithubStatus *notification.GithubStatus `protobuf:"bytes,3,opt,name=githubStatus,proto3" json:"githubStatus,omitempty"`
	Artifacts    *artifact.Artifacts        `protobuf:"bytes,4,opt,name=artifacts,proto3" json:"artifacts,omitempty"`
	Pubsub       *pubsub.Pubsub             `protobuf:"bytes,5,opt,name=pubsub,proto3" json:"pubsub,omitempty"`
	Gcb          *ci.GoogleCloudBuild       `protobuf:"bytes,6,opt,name=gcb,proto3" json:"gcb,omitempty"`
	Stats        *Echo_Stats                `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
	Scheduler    *Echo_Scheduler            `protobuf:"bytes,8,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	// Configuration for the status of non-core services.
	Services *Echo_Services `protobuf:"bytes,9,opt,name=services,proto3" json:"services,omitempty"`
}

func (x *Echo) Reset() {
	*x = Echo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_echo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo) ProtoMessage() {}

func (x *Echo) ProtoReflect() protoreflect.Message {
	mi := &file_config_echo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo.ProtoReflect.Descriptor instead.
func (*Echo) Descriptor() ([]byte, []int) {
	return file_config_echo_proto_rawDescGZIP(), []int{0}
}

func (x *Echo) GetSlack() *notification.Slack {
	if x != nil {
		return x.Slack
	}
	return nil
}

func (x *Echo) GetTwilio() *notification.Twilio {
	if x != nil {
		return x.Twilio
	}
	return nil
}

func (x *Echo) GetGithubStatus() *notification.GithubStatus {
	if x != nil {
		return x.GithubStatus
	}
	return nil
}

func (x *Echo) GetArtifacts() *artifact.Artifacts {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *Echo) GetPubsub() *pubsub.Pubsub {
	if x != nil {
		return x.Pubsub
	}
	return nil
}

func (x *Echo) GetGcb() *ci.GoogleCloudBuild {
	if x != nil {
		return x.Gcb
	}
	return nil
}

func (x *Echo) GetStats() *Echo_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Echo) GetScheduler() *Echo_Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (x *Echo) GetServices() *Echo_Services {
	if x != nil {
		return x.Services
	}
	return nil
}

type Echo_Services struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keel *ServiceSettings `protobuf:"bytes,1,opt,name=keel,proto3" json:"keel,omitempty"`
}

func (x *Echo_Services) Reset() {
	*x = Echo_Services{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_echo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Echo_Services) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo_Services) ProtoMessage() {}

func (x *Echo_Services) ProtoReflect() protoreflect.Message {
	mi := &file_config_echo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo_Services.ProtoReflect.Descriptor instead.
func (*Echo_Services) Descriptor() ([]byte, []int) {
	return file_config_echo_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Echo_Services) GetKeel() *ServiceSettings {
	if x != nil {
		return x.Keel
	}
	return nil
}

// Echo scheduler configuration.
type Echo_Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cron configuration.
	Cron *Echo_Scheduler_Cron `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron,omitempty"`
}

func (x *Echo_Scheduler) Reset() {
	*x = Echo_Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_echo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Echo_Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo_Scheduler) ProtoMessage() {}

func (x *Echo_Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_config_echo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo_Scheduler.ProtoReflect.Descriptor instead.
func (*Echo_Scheduler) Descriptor() ([]byte, []int) {
	return file_config_echo_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Echo_Scheduler) GetCron() *Echo_Scheduler_Cron {
	if x != nil {
		return x.Cron
	}
	return nil
}

// Configuration for optional collection of usage metrics.
type Echo_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to send usage metrics. Defaults to true.
	Enabled *wrappers.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// A unique ID representing this deployment of Spinnaker.
	InstanceId string `protobuf:"bytes,2,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// The version of Spinnaker being deployed.
	SpinnakerVersion string `protobuf:"bytes,3,opt,name=spinnakerVersion,proto3" json:"spinnakerVersion,omitempty"`
	// The endpoint to which usage metrics are sent. This should generally be left
	// empty, in which case metrics are sent to the default endpoint.
	Endpoint string `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Information about how Spinnaker is configured and deployed.
	DeploymentMethod *client.DeploymentMethod `protobuf:"bytes,5,opt,name=deploymentMethod,proto3" json:"deploymentMethod,omitempty"`
}

func (x *Echo_Stats) Reset() {
	*x = Echo_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_echo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Echo_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo_Stats) ProtoMessage() {}

func (x *Echo_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_config_echo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo_Stats.ProtoReflect.Descriptor instead.
func (*Echo_Stats) Descriptor() ([]byte, []int) {
	return file_config_echo_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Echo_Stats) GetEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Echo_Stats) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Echo_Stats) GetSpinnakerVersion() string {
	if x != nil {
		return x.SpinnakerVersion
	}
	return ""
}

func (x *Echo_Stats) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Echo_Stats) GetDeploymentMethod() *client.DeploymentMethod {
	if x != nil {
		return x.DeploymentMethod
	}
	return nil
}

// Cron configuration.
type Echo_Scheduler_Cron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default timezone. Defaults to `America/Los_Angeles`.
	Timezone string `protobuf:"bytes,1,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *Echo_Scheduler_Cron) Reset() {
	*x = Echo_Scheduler_Cron{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_echo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Echo_Scheduler_Cron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo_Scheduler_Cron) ProtoMessage() {}

func (x *Echo_Scheduler_Cron) ProtoReflect() protoreflect.Message {
	mi := &file_config_echo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo_Scheduler_Cron.ProtoReflect.Descriptor instead.
func (*Echo_Scheduler_Cron) Descriptor() ([]byte, []int) {
	return file_config_echo_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Echo_Scheduler_Cron) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

var File_config_echo_proto protoreflect.FileDescriptor

var file_config_echo_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x69, 0x2f,
	0x67, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x74, 0x77, 0x69, 0x6c, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xff, 0x06, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x6c, 0x61,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c,
	0x61, 0x63, 0x6b, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x77,
	0x69, 0x6c, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x77, 0x69, 0x6c, 0x69, 0x6f, 0x52, 0x06, 0x74, 0x77, 0x69, 0x6c, 0x69, 0x6f, 0x12, 0x44,
	0x0a, 0x0c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x50, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x52, 0x06, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x2c, 0x0a, 0x03, 0x67,
	0x63, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x69, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x03, 0x67, 0x63, 0x62, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x63, 0x68, 0x6f,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x3d,
	0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x65,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x04, 0x6b, 0x65, 0x65, 0x6c, 0x1a, 0x66, 0x0a,
	0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x72,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x52, 0x04, 0x63, 0x72, 0x6f,
	0x6e, 0x1a, 0x22, 0x0a, 0x04, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x1a, 0xea, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x69, 0x6e, 0x6e, 0x61, 0x6b,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x70, 0x69, 0x6e, 0x6e, 0x61, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x70, 0x69, 0x6e, 0x6e, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x6b, 0x6c, 0x65, 0x61, 0x74,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_echo_proto_rawDescOnce sync.Once
	file_config_echo_proto_rawDescData = file_config_echo_proto_rawDesc
)

func file_config_echo_proto_rawDescGZIP() []byte {
	file_config_echo_proto_rawDescOnce.Do(func() {
		file_config_echo_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_echo_proto_rawDescData)
	})
	return file_config_echo_proto_rawDescData
}

var file_config_echo_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_config_echo_proto_goTypes = []interface{}{
	(*Echo)(nil),                      // 0: proto.config.Echo
	(*Echo_Services)(nil),             // 1: proto.config.Echo.Services
	(*Echo_Scheduler)(nil),            // 2: proto.config.Echo.Scheduler
	(*Echo_Stats)(nil),                // 3: proto.config.Echo.Stats
	(*Echo_Scheduler_Cron)(nil),       // 4: proto.config.Echo.Scheduler.Cron
	(*notification.Slack)(nil),        // 5: proto.notification.Slack
	(*notification.Twilio)(nil),       // 6: proto.notification.Twilio
	(*notification.GithubStatus)(nil), // 7: proto.notification.GithubStatus
	(*artifact.Artifacts)(nil),        // 8: proto.artifact.Artifacts
	(*pubsub.Pubsub)(nil),             // 9: proto.pubsub.Pubsub
	(*ci.GoogleCloudBuild)(nil),       // 10: proto.ci.GoogleCloudBuild
	(*ServiceSettings)(nil),           // 11: proto.config.ServiceSettings
	(*wrappers.BoolValue)(nil),        // 12: google.protobuf.BoolValue
	(*client.DeploymentMethod)(nil),   // 13: proto.DeploymentMethod
}
var file_config_echo_proto_depIdxs = []int32{
	5,  // 0: proto.config.Echo.slack:type_name -> proto.notification.Slack
	6,  // 1: proto.config.Echo.twilio:type_name -> proto.notification.Twilio
	7,  // 2: proto.config.Echo.githubStatus:type_name -> proto.notification.GithubStatus
	8,  // 3: proto.config.Echo.artifacts:type_name -> proto.artifact.Artifacts
	9,  // 4: proto.config.Echo.pubsub:type_name -> proto.pubsub.Pubsub
	10, // 5: proto.config.Echo.gcb:type_name -> proto.ci.GoogleCloudBuild
	3,  // 6: proto.config.Echo.stats:type_name -> proto.config.Echo.Stats
	2,  // 7: proto.config.Echo.scheduler:type_name -> proto.config.Echo.Scheduler
	1,  // 8: proto.config.Echo.services:type_name -> proto.config.Echo.Services
	11, // 9: proto.config.Echo.Services.keel:type_name -> proto.config.ServiceSettings
	4,  // 10: proto.config.Echo.Scheduler.cron:type_name -> proto.config.Echo.Scheduler.Cron
	12, // 11: proto.config.Echo.Stats.enabled:type_name -> google.protobuf.BoolValue
	13, // 12: proto.config.Echo.Stats.deploymentMethod:type_name -> proto.DeploymentMethod
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_config_echo_proto_init() }
func file_config_echo_proto_init() {
	if File_config_echo_proto != nil {
		return
	}
	file_config_service_enabled_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_config_echo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Echo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_echo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Echo_Services); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_echo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Echo_Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_echo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Echo_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_echo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Echo_Scheduler_Cron); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_echo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_echo_proto_goTypes,
		DependencyIndexes: file_config_echo_proto_depIdxs,
		MessageInfos:      file_config_echo_proto_msgTypes,
	}.Build()
	File_config_echo_proto = out.File
	file_config_echo_proto_rawDesc = nil
	file_config_echo_proto_goTypes = nil
	file_config_echo_proto_depIdxs = nil
}
