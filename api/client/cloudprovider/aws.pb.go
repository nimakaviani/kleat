// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: cloudprovider/aws.proto

package cloudprovider

import (
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	client "github.com/spinnaker/kleat/api/client"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Configuration for the AWS provider.
type Aws struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the provider is enabled.
	Enabled *wrappers.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The list of configured accounts.
	Accounts []*AwsAccount `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// The name of the primary account.
	PrimaryAccount string `protobuf:"bytes,3,opt,name=primaryAccount,proto3" json:"primaryAccount,omitempty"`
	// Your AWS Access Key ID. Note that if you are baking AMIs with Rosco, you
	// may also need to set `AwsBakeryDefaults.awsAccessKey`.
	AccessKeyId string `protobuf:"bytes,4,opt,name=accessKeyId,proto3" json:"accessKeyId,omitempty"`
	// Your AWS Secret Key. Note that if you are baking AMIs with Rosco, you
	// may also need to set `AwsBakeryDefaults.awsSecretKey`.
	SecretAccessKey string `protobuf:"bytes,5,opt,name=secretAccessKey,proto3" json:"secretAccessKey,omitempty"`
	// List of default regions.
	DefaultRegions []*AwsRegion `protobuf:"bytes,6,rep,name=defaultRegions,proto3" json:"defaultRegions,omitempty"`
	// Configuration for AWS-specific features.
	Features *AwsFeatures `protobuf:"bytes,7,opt,name=features,proto3" json:"features,omitempty"`
	// Configuration for Spinnaker's image bakery.
	BakeryDefaults *AwsBakeryDefaults `protobuf:"bytes,8,opt,name=bakeryDefaults,proto3" json:"bakeryDefaults,omitempty"`
	// A template for generating the name of the AWS key-pair from the name of
	// the account; only used for accounts where defaultKeyPair is not specified.
	DefaultKeyPairTemplate string `protobuf:"bytes,9,opt,name=defaultKeyPairTemplate,proto3" json:"defaultKeyPairTemplate,omitempty"`
	// Default values for AWS deployments.
	Defaults *AwsDefaults `protobuf:"bytes,10,opt,name=defaults,proto3" json:"defaults,omitempty"`
}

func (x *Aws) Reset() {
	*x = Aws{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudprovider_aws_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aws) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aws) ProtoMessage() {}

func (x *Aws) ProtoReflect() protoreflect.Message {
	mi := &file_cloudprovider_aws_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aws.ProtoReflect.Descriptor instead.
func (*Aws) Descriptor() ([]byte, []int) {
	return file_cloudprovider_aws_proto_rawDescGZIP(), []int{0}
}

func (x *Aws) GetEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Aws) GetAccounts() []*AwsAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *Aws) GetPrimaryAccount() string {
	if x != nil {
		return x.PrimaryAccount
	}
	return ""
}

func (x *Aws) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *Aws) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *Aws) GetDefaultRegions() []*AwsRegion {
	if x != nil {
		return x.DefaultRegions
	}
	return nil
}

func (x *Aws) GetFeatures() *AwsFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Aws) GetBakeryDefaults() *AwsBakeryDefaults {
	if x != nil {
		return x.BakeryDefaults
	}
	return nil
}

func (x *Aws) GetDefaultKeyPairTemplate() string {
	if x != nil {
		return x.DefaultKeyPairTemplate
	}
	return ""
}

func (x *Aws) GetDefaults() *AwsDefaults {
	if x != nil {
		return x.Defaults
	}
	return nil
}

// Configuration for defaults for AWS deployments.
type AwsDefaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default IAM role to use for deployments, when not otherwise specified.
	IamRole string `protobuf:"bytes,1,opt,name=iamRole,proto3" json:"iamRole,omitempty"`
}

func (x *AwsDefaults) Reset() {
	*x = AwsDefaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudprovider_aws_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDefaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDefaults) ProtoMessage() {}

func (x *AwsDefaults) ProtoReflect() protoreflect.Message {
	mi := &file_cloudprovider_aws_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDefaults.ProtoReflect.Descriptor instead.
func (*AwsDefaults) Descriptor() ([]byte, []int) {
	return file_cloudprovider_aws_proto_rawDescGZIP(), []int{1}
}

func (x *AwsDefaults) GetIamRole() string {
	if x != nil {
		return x.IamRole
	}
	return ""
}

// Configuration for an AWS account.
type AwsAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The AWS account ID to manage. See
	// http://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	// for more information.
	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	// If set, Spinnaker will configure a credentials provider that uses AWS
	// Security Token Service to assume the specified role.
	// Examples: `user/spinnaker`, `role/spinnakerManaged`.
	AssumeRole string `protobuf:"bytes,2,opt,name=assumeRole,proto3" json:"assumeRole,omitempty"`
	// The name of the AWS key-pair to use. See
	// http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
	// for more information.
	DefaultKeyPair string `protobuf:"bytes,3,opt,name=defaultKeyPair,proto3" json:"defaultKeyPair,omitempty"`
	// The endpoint at which your Eureka discovery system is reachable. See
	// https://github.com/Netflix/eureka for more information. Example:
	// `http://.eureka.url.to.use:8080/eureka-server/v2`.
	// Using will make Spinnaker use AWS regions in the hostname to access
	// discovery so that you can have discovery for multiple regions.
	Discovery string `protobuf:"bytes,4,opt,name=discovery,proto3" json:"discovery,omitempty"`
	// The endpoint at which Edda is reachable. Edda is not a hard dependency of
	// Spinnaker, but is helpful for reducing the request volume against AWS.
	// See https://github.com/Netflix/edda for more information.
	Edda string `protobuf:"bytes,5,opt,name=edda,proto3" json:"edda,omitempty"`
	// The environment name for the account. Many accounts can share the
	// same environment (e.g., dev, test, prod).
	Environment string `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	// Fiat permissions configuration.
	Permissions *client.Permissions `protobuf:"bytes,7,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// (Deprecated): List of required Fiat permission groups. Configure
	// `permissions` instead.
	RequiredGroupMembership []string `protobuf:"bytes,8,rep,name=requiredGroupMembership,proto3" json:"requiredGroupMembership,omitempty"`
	// List of configured AWS lifecycle hooks.
	LifecycleHooks []*AwsLifecycleHook `protobuf:"bytes,9,rep,name=lifecycleHooks,proto3" json:"lifecycleHooks,omitempty"`
	// List of configured AWS regions.
	Regions []*AwsRegion `protobuf:"bytes,12,rep,name=regions,proto3" json:"regions,omitempty"`
	// The name of the account.
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AwsAccount) Reset() {
	*x = AwsAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudprovider_aws_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsAccount) ProtoMessage() {}

func (x *AwsAccount) ProtoReflect() protoreflect.Message {
	mi := &file_cloudprovider_aws_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsAccount.ProtoReflect.Descriptor instead.
func (*AwsAccount) Descriptor() ([]byte, []int) {
	return file_cloudprovider_aws_proto_rawDescGZIP(), []int{2}
}

func (x *AwsAccount) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AwsAccount) GetAssumeRole() string {
	if x != nil {
		return x.AssumeRole
	}
	return ""
}

func (x *AwsAccount) GetDefaultKeyPair() string {
	if x != nil {
		return x.DefaultKeyPair
	}
	return ""
}

func (x *AwsAccount) GetDiscovery() string {
	if x != nil {
		return x.Discovery
	}
	return ""
}

func (x *AwsAccount) GetEdda() string {
	if x != nil {
		return x.Edda
	}
	return ""
}

func (x *AwsAccount) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *AwsAccount) GetPermissions() *client.Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *AwsAccount) GetRequiredGroupMembership() []string {
	if x != nil {
		return x.RequiredGroupMembership
	}
	return nil
}

func (x *AwsAccount) GetLifecycleHooks() []*AwsLifecycleHook {
	if x != nil {
		return x.LifecycleHooks
	}
	return nil
}

func (x *AwsAccount) GetRegions() []*AwsRegion {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *AwsAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// An AWS region.
type AwsRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the region.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AwsRegion) Reset() {
	*x = AwsRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudprovider_aws_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRegion) ProtoMessage() {}

func (x *AwsRegion) ProtoReflect() protoreflect.Message {
	mi := &file_cloudprovider_aws_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRegion.ProtoReflect.Descriptor instead.
func (*AwsRegion) Descriptor() ([]byte, []int) {
	return file_cloudprovider_aws_proto_rawDescGZIP(), []int{3}
}

func (x *AwsRegion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Configuration for Spinnaker's image bakery.
type AwsBakeryDefaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default access key used to communicate with AWS.
	AwsAccessKey string `protobuf:"bytes,1,opt,name=awsAccessKey,proto3" json:"awsAccessKey,omitempty"`
	// The secret key used to communicate with AWS.
	AwsSecretKey string `protobuf:"bytes,2,opt,name=awsSecretKey,proto3" json:"awsSecretKey,omitempty"`
	// If using VPC, the default ID of the subnet, such as `subnet-12345def`,
	// where Packer will launch the EC2 instance. This field is required if you
	// are using a non-default VPC.
	AwsSubnetId string `protobuf:"bytes,3,opt,name=awsSubnetId,proto3" json:"awsSubnetId,omitempty"`
	// If launching into a VPC subnet, Packer needs the VPC ID in order to
	// create a temporary security group within the VPC. Requires `subnet_id` to
	// be set. If this default value is left blank, Packer will try to get the
	// VPC ID from `awsSubnetId`.
	AwsVpcId string `protobuf:"bytes,4,opt,name=awsVpcId,proto3" json:"awsVpcId,omitempty"`
	// If using a non-default VPC, public IP addresses are not provided by
	// default. If this is enabled, your new instance will get a Public IP.
	AwsAssociatePublicIpAddress *wrappers.BoolValue `protobuf:"bytes,5,opt,name=awsAssociatePublicIpAddress,proto3" json:"awsAssociatePublicIpAddress,omitempty"`
	// The default type of virtualization for the AMI you are building. This
	// option must match the supported virtualization type of
	// `AwsVirtualizationSettings.sourceAmi`.
	// Acceptable values: `pv`, `hvm`.
	DefaultVirtualizationType string `protobuf:"bytes,6,opt,name=defaultVirtualizationType,proto3" json:"defaultVirtualizationType,omitempty"`
	// List of configured base images.
	BaseImages []*AwsBaseImageSettings `protobuf:"bytes,7,rep,name=baseImages,proto3" json:"baseImages,omitempty"`
	// This is the name of the packer template that will be used to bake images
	// from this base image. The template file must be found in this list
	// https://github.com/spinnaker/rosco/tree/master/rosco-web/config/packer,
	// or supplied as described here: https://spinnaker.io/setup/bakery/.
	TemplateFile string `protobuf:"bytes,8,opt,name=templateFile,proto3" json:"templateFile,omitempty"`
}

func (x *AwsBakeryDefaults) Reset() {
	*x = AwsBakeryDefaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudprovider_aws_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsBakeryDefaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsBakeryDefaults) ProtoMessage() {}

func (x *AwsBakeryDefaults) ProtoReflect() protoreflect.Message {
	mi := &file_cloudprovider_aws_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsBakeryDefaults.ProtoReflect.Descriptor instead.
func (*AwsBakeryDefaults) Descriptor() ([]byte, []int) {
	return file_cloudprovider_aws_proto_rawDescGZIP(), []int{4}
}

func (x *AwsBakeryDefaults) GetAwsAccessKey() string {
	if x != nil {
		return x.AwsAccessKey
	}
	return ""
}

func (x *AwsBakeryDefaults) GetAwsSecretKey() string {
	if x != nil {
		return x.AwsSecretKey
	}
	return ""
}

func (x *AwsBakeryDefaults) GetAwsSubnetId() string {
	if x != nil {
		return x.AwsSubnetId
	}
	return ""
}

func (x *AwsBakeryDefaults) GetAwsVpcId() string {
	if x != nil {
		return x.AwsVpcId
	}
	return ""
}

func (x *AwsBakeryDefaults) GetAwsAssociatePublicIpAddress() *wrappers.BoolValue {
	if x != nil {
		return x.AwsAssociatePublicIpAddress
	}
	return nil
}

func (x *AwsBakeryDefaults) GetDefaultVirtualizationType() string {
	if x != nil {
		return x.DefaultVirtualizationType
	}
	return ""
}

func (x *AwsBakeryDefaults) GetBaseImages() []*AwsBaseImageSettings {
	if x != nil {
		return x.BaseImages
	}
	return nil
}

func (x *AwsBakeryDefaults) GetTemplateFile() string {
	if x != nil {
		return x.TemplateFile
	}
	return ""
}

// Configuration for a base image for the AWS provider's bakery.
type AwsBaseImageSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base image configuration.
	BaseImage *AwsBaseImage `protobuf:"bytes,1,opt,name=baseImage,proto3" json:"baseImage,omitempty"`
	// Base image virtualization settings.
	VirtualizationSettings *AwsVirtualizationSettings `protobuf:"bytes,2,opt,name=virtualizationSettings,proto3" json:"virtualizationSettings,omitempty"`
}

func (x *AwsBaseImageSettings) Reset() {
	*x = AwsBaseImageSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudprovider_aws_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsBaseImageSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsBaseImageSettings) ProtoMessage() {}

func (x *AwsBaseImageSettings) ProtoReflect() protoreflect.Message {
	mi := &file_cloudprovider_aws_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsBaseImageSettings.ProtoReflect.Descriptor instead.
func (*AwsBaseImageSettings) Descriptor() ([]byte, []int) {
	return file_cloudprovider_aws_proto_rawDescGZIP(), []int{5}
}

func (x *AwsBaseImageSettings) GetBaseImage() *AwsBaseImage {
	if x != nil {
		return x.BaseImage
	}
	return nil
}

func (x *AwsBaseImageSettings) GetVirtualizationSettings() *AwsVirtualizationSettings {
	if x != nil {
		return x.VirtualizationSettings
	}
	return nil
}

// Base image configuration.
type AwsBaseImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the identifier used by AWS to find this base image.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A short description to help human operators identify the
	// image.
	ShortDescription string `protobuf:"bytes,2,opt,name=shortDescription,proto3" json:"shortDescription,omitempty"`
	// A long description to help human operators identify the
	// image.
	DetailedDescription string `protobuf:"bytes,3,opt,name=detailedDescription,proto3" json:"detailedDescription,omitempty"`
	// This is used to help Spinnaker's bakery download the build
	// artifacts you supply it with. For example, specifying deb
	// indicates that your artifacts will need to be fetched from a
	// debian repository.
	PackageType string `protobuf:"bytes,4,opt,name=packageType,proto3" json:"packageType,omitempty"`
	// The name of the Packer template that will be used to bake images from
	// this base image. The template file must be found in this list:
	// https://github.com/spinnaker/rosco/tree/master/rosco-web/config/packer,
	// or supplied as described here: https://spinnaker.io/setup/bakery/.
	TemplateFile string `protobuf:"bytes,5,opt,name=templateFile,proto3" json:"templateFile,omitempty"`
}

func (x *AwsBaseImage) Reset() {
	*x = AwsBaseImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudprovider_aws_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsBaseImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsBaseImage) ProtoMessage() {}

func (x *AwsBaseImage) ProtoReflect() protoreflect.Message {
	mi := &file_cloudprovider_aws_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsBaseImage.ProtoReflect.Descriptor instead.
func (*AwsBaseImage) Descriptor() ([]byte, []int) {
	return file_cloudprovider_aws_proto_rawDescGZIP(), []int{6}
}

func (x *AwsBaseImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AwsBaseImage) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *AwsBaseImage) GetDetailedDescription() string {
	if x != nil {
		return x.DetailedDescription
	}
	return ""
}

func (x *AwsBaseImage) GetPackageType() string {
	if x != nil {
		return x.PackageType
	}
	return ""
}

func (x *AwsBaseImage) GetTemplateFile() string {
	if x != nil {
		return x.TemplateFile
	}
	return ""
}

// Base image virtualization settings.
type AwsVirtualizationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the region in which to launch the EC2 instance to create the
	// AMI.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// The type of virtualization for the AMI you are building. This
	// option must match the supported virtualization type of `sourceAmi`.
	// Acceptable values: `pv`, `hvm`.
	VirtualizationType string `protobuf:"bytes,2,opt,name=virtualizationType,proto3" json:"virtualizationType,omitempty"`
	// The EC2 instance type to use while building the AMI, such as `t2.small`.
	InstanceType string `protobuf:"bytes,3,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	// The source AMI whose root volume will be copied and provisioned on the
	// currently running instance. This must be an EBS-backed AMI with a root
	// volume snapshot that you have access to.
	SourceAmi string `protobuf:"bytes,4,opt,name=sourceAmi,proto3" json:"sourceAmi,omitempty"`
	// The username to connect to SSH with. Required if using SSH.
	SshUserName string `protobuf:"bytes,5,opt,name=sshUserName,proto3" json:"sshUserName,omitempty"`
	// The username to use to connect to WinRM.
	WinRmUserName string `protobuf:"bytes,6,opt,name=winRmUserName,proto3" json:"winRmUserName,omitempty"`
	// The maximum hourly price to pay for a spot instance to create the AMI.
	// Spot instances are a type of instance that EC2 starts when the current
	// spot price is less than the maximum price you specify. Spot price will be
	// updated based on available spot instance capacity and current spot
	// instance requests. It may save you some costs. You can set this to `auto`
	// for Packer to automatically discover the best spot price or to "0" to use
	// an on demand instance (default).
	SpotPrice string `protobuf:"bytes,7,opt,name=spotPrice,proto3" json:"spotPrice,omitempty"`
	// Required if `spotPrice` is set to `auto`. This tells Packer what sort of
	// AMI you are launching to find the best spot price. This must be one of:
	// `Linux/UNIX`, `SUSE Linux`, `Windows`, `Linux/UNIX (Amazon VPC)`,
	// `SUSE Linux (Amazon VPC)`, `Windows (Amazon VPC)`.
	SpotPriceAutoProduct string `protobuf:"bytes,8,opt,name=spotPriceAutoProduct,proto3" json:"spotPriceAutoProduct,omitempty"`
}

func (x *AwsVirtualizationSettings) Reset() {
	*x = AwsVirtualizationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudprovider_aws_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsVirtualizationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsVirtualizationSettings) ProtoMessage() {}

func (x *AwsVirtualizationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_cloudprovider_aws_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsVirtualizationSettings.ProtoReflect.Descriptor instead.
func (*AwsVirtualizationSettings) Descriptor() ([]byte, []int) {
	return file_cloudprovider_aws_proto_rawDescGZIP(), []int{7}
}

func (x *AwsVirtualizationSettings) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AwsVirtualizationSettings) GetVirtualizationType() string {
	if x != nil {
		return x.VirtualizationType
	}
	return ""
}

func (x *AwsVirtualizationSettings) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *AwsVirtualizationSettings) GetSourceAmi() string {
	if x != nil {
		return x.SourceAmi
	}
	return ""
}

func (x *AwsVirtualizationSettings) GetSshUserName() string {
	if x != nil {
		return x.SshUserName
	}
	return ""
}

func (x *AwsVirtualizationSettings) GetWinRmUserName() string {
	if x != nil {
		return x.WinRmUserName
	}
	return ""
}

func (x *AwsVirtualizationSettings) GetSpotPrice() string {
	if x != nil {
		return x.SpotPrice
	}
	return ""
}

func (x *AwsVirtualizationSettings) GetSpotPriceAutoProduct() string {
	if x != nil {
		return x.SpotPriceAutoProduct
	}
	return ""
}

// Configuration for AWS Auto Scaling Lifecycle Hooks. For more information, see:
// https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html
type AwsLifecycleHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an
	// unexpected failure occurs. Acceptable values: `CONTINUE`, `ABANDON`.
	DefaultResult string `protobuf:"bytes,1,opt,name=defaultResult,proto3" json:"defaultResult,omitempty"`
	// Set the heartbeat timeout in seconds for the lifecycle hook. Instances can remain in a wait
	// state for a finite period of time. Must be greater than or equal to 30 and less than or equal to 7200.
	// The default is 3600 (one hour).
	HeartbeatTimeout int32 `protobuf:"varint,2,opt,name=heartbeatTimeout,proto3" json:"heartbeatTimeout,omitempty"`
	// Type of lifecycle transition. Acceptable values: `autoscaling:EC2_INSTANCE_LAUNCHING`,
	// `autoscaling:EC2_INSTANCE_TERMINATING`
	LifecycleTransition string `protobuf:"bytes,3,opt,name=lifecycleTransition,proto3" json:"lifecycleTransition,omitempty"`
	// The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in
	// the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic.
	NotificationTargetARN string `protobuf:"bytes,4,opt,name=notificationTargetARN,proto3" json:"notificationTargetARN,omitempty"`
	// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification
	// target, for example, an Amazon SNS topic or an Amazon SQS queue.
	RoleARN string `protobuf:"bytes,5,opt,name=roleARN,proto3" json:"roleARN,omitempty"`
}

func (x *AwsLifecycleHook) Reset() {
	*x = AwsLifecycleHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudprovider_aws_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsLifecycleHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsLifecycleHook) ProtoMessage() {}

func (x *AwsLifecycleHook) ProtoReflect() protoreflect.Message {
	mi := &file_cloudprovider_aws_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsLifecycleHook.ProtoReflect.Descriptor instead.
func (*AwsLifecycleHook) Descriptor() ([]byte, []int) {
	return file_cloudprovider_aws_proto_rawDescGZIP(), []int{8}
}

func (x *AwsLifecycleHook) GetDefaultResult() string {
	if x != nil {
		return x.DefaultResult
	}
	return ""
}

func (x *AwsLifecycleHook) GetHeartbeatTimeout() int32 {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return 0
}

func (x *AwsLifecycleHook) GetLifecycleTransition() string {
	if x != nil {
		return x.LifecycleTransition
	}
	return ""
}

func (x *AwsLifecycleHook) GetNotificationTargetARN() string {
	if x != nil {
		return x.NotificationTargetARN
	}
	return ""
}

func (x *AwsLifecycleHook) GetRoleARN() string {
	if x != nil {
		return x.RoleARN
	}
	return ""
}

// Configuration for AWS-specific features.
type AwsFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for AWS CloudFormation.
	CloudFormation *AwsFeatures_CloudFormation `protobuf:"bytes,1,opt,name=cloudFormation,proto3" json:"cloudFormation,omitempty"`
}

func (x *AwsFeatures) Reset() {
	*x = AwsFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudprovider_aws_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsFeatures) ProtoMessage() {}

func (x *AwsFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_cloudprovider_aws_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsFeatures.ProtoReflect.Descriptor instead.
func (*AwsFeatures) Descriptor() ([]byte, []int) {
	return file_cloudprovider_aws_proto_rawDescGZIP(), []int{9}
}

func (x *AwsFeatures) GetCloudFormation() *AwsFeatures_CloudFormation {
	if x != nil {
		return x.CloudFormation
	}
	return nil
}

// Configuration for AWS CloudFormation.
type AwsFeatures_CloudFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether AWS CloudFormation is enabled.
	Enabled *wrappers.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AwsFeatures_CloudFormation) Reset() {
	*x = AwsFeatures_CloudFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudprovider_aws_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsFeatures_CloudFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsFeatures_CloudFormation) ProtoMessage() {}

func (x *AwsFeatures_CloudFormation) ProtoReflect() protoreflect.Message {
	mi := &file_cloudprovider_aws_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsFeatures_CloudFormation.ProtoReflect.Descriptor instead.
func (*AwsFeatures_CloudFormation) Descriptor() ([]byte, []int) {
	return file_cloudprovider_aws_proto_rawDescGZIP(), []int{9, 0}
}

func (x *AwsFeatures_CloudFormation) GetEnabled() *wrappers.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

var File_cloudprovider_aws_proto protoreflect.FileDescriptor

var file_cloudprovider_aws_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f,
	0x61, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb8, 0x04, 0x0a, 0x03, 0x41, 0x77, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x46, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x41, 0x77, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x79,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x79, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x0e, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x79, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x08, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x08, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x27, 0x0a, 0x0b,
	0x41, 0x77, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x61,
	0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xd3, 0x03, 0x0a, 0x0a, 0x41, 0x77, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x64, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x64, 0x64, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x4d,
	0x0a, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73,
	0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x0e, 0x6c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x38, 0x0a,
	0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x09, 0x41,
	0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x03, 0x0a,
	0x11, 0x41, 0x77, 0x73, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77,
	0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x77,
	0x73, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x77, 0x73, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x1b, 0x61, 0x77, 0x73, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x61, 0x77, 0x73, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x77, 0x73, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x41, 0x77, 0x73, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a,
	0x16, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x16, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x41, 0x77, 0x73, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x19, 0x41,
	0x77, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d,
	0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x6d, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x52, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x6e,
	0x52, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70,
	0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x70, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x70, 0x6f, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xe6, 0x01, 0x0a,
	0x10, 0x41, 0x77, 0x73, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x48, 0x6f, 0x6f,
	0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x52, 0x4e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x52, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x41, 0x52, 0x4e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x41, 0x52, 0x4e, 0x22, 0xae, 0x01, 0x0a, 0x0b, 0x41, 0x77, 0x73, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x46,
	0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x69, 0x6e, 0x6e, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x6b,
	0x6c, 0x65, 0x61, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloudprovider_aws_proto_rawDescOnce sync.Once
	file_cloudprovider_aws_proto_rawDescData = file_cloudprovider_aws_proto_rawDesc
)

func file_cloudprovider_aws_proto_rawDescGZIP() []byte {
	file_cloudprovider_aws_proto_rawDescOnce.Do(func() {
		file_cloudprovider_aws_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloudprovider_aws_proto_rawDescData)
	})
	return file_cloudprovider_aws_proto_rawDescData
}

var file_cloudprovider_aws_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_cloudprovider_aws_proto_goTypes = []interface{}{
	(*Aws)(nil),                        // 0: proto.cloudprovider.Aws
	(*AwsDefaults)(nil),                // 1: proto.cloudprovider.AwsDefaults
	(*AwsAccount)(nil),                 // 2: proto.cloudprovider.AwsAccount
	(*AwsRegion)(nil),                  // 3: proto.cloudprovider.AwsRegion
	(*AwsBakeryDefaults)(nil),          // 4: proto.cloudprovider.AwsBakeryDefaults
	(*AwsBaseImageSettings)(nil),       // 5: proto.cloudprovider.AwsBaseImageSettings
	(*AwsBaseImage)(nil),               // 6: proto.cloudprovider.AwsBaseImage
	(*AwsVirtualizationSettings)(nil),  // 7: proto.cloudprovider.AwsVirtualizationSettings
	(*AwsLifecycleHook)(nil),           // 8: proto.cloudprovider.AwsLifecycleHook
	(*AwsFeatures)(nil),                // 9: proto.cloudprovider.AwsFeatures
	(*AwsFeatures_CloudFormation)(nil), // 10: proto.cloudprovider.AwsFeatures.CloudFormation
	(*wrappers.BoolValue)(nil),         // 11: google.protobuf.BoolValue
	(*client.Permissions)(nil),         // 12: proto.Permissions
}
var file_cloudprovider_aws_proto_depIdxs = []int32{
	11, // 0: proto.cloudprovider.Aws.enabled:type_name -> google.protobuf.BoolValue
	2,  // 1: proto.cloudprovider.Aws.accounts:type_name -> proto.cloudprovider.AwsAccount
	3,  // 2: proto.cloudprovider.Aws.defaultRegions:type_name -> proto.cloudprovider.AwsRegion
	9,  // 3: proto.cloudprovider.Aws.features:type_name -> proto.cloudprovider.AwsFeatures
	4,  // 4: proto.cloudprovider.Aws.bakeryDefaults:type_name -> proto.cloudprovider.AwsBakeryDefaults
	1,  // 5: proto.cloudprovider.Aws.defaults:type_name -> proto.cloudprovider.AwsDefaults
	12, // 6: proto.cloudprovider.AwsAccount.permissions:type_name -> proto.Permissions
	8,  // 7: proto.cloudprovider.AwsAccount.lifecycleHooks:type_name -> proto.cloudprovider.AwsLifecycleHook
	3,  // 8: proto.cloudprovider.AwsAccount.regions:type_name -> proto.cloudprovider.AwsRegion
	11, // 9: proto.cloudprovider.AwsBakeryDefaults.awsAssociatePublicIpAddress:type_name -> google.protobuf.BoolValue
	5,  // 10: proto.cloudprovider.AwsBakeryDefaults.baseImages:type_name -> proto.cloudprovider.AwsBaseImageSettings
	6,  // 11: proto.cloudprovider.AwsBaseImageSettings.baseImage:type_name -> proto.cloudprovider.AwsBaseImage
	7,  // 12: proto.cloudprovider.AwsBaseImageSettings.virtualizationSettings:type_name -> proto.cloudprovider.AwsVirtualizationSettings
	10, // 13: proto.cloudprovider.AwsFeatures.cloudFormation:type_name -> proto.cloudprovider.AwsFeatures.CloudFormation
	11, // 14: proto.cloudprovider.AwsFeatures.CloudFormation.enabled:type_name -> google.protobuf.BoolValue
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_cloudprovider_aws_proto_init() }
func file_cloudprovider_aws_proto_init() {
	if File_cloudprovider_aws_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cloudprovider_aws_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aws); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudprovider_aws_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsDefaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudprovider_aws_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudprovider_aws_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudprovider_aws_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsBakeryDefaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudprovider_aws_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsBaseImageSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudprovider_aws_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsBaseImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudprovider_aws_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsVirtualizationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudprovider_aws_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsLifecycleHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudprovider_aws_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudprovider_aws_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsFeatures_CloudFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloudprovider_aws_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloudprovider_aws_proto_goTypes,
		DependencyIndexes: file_cloudprovider_aws_proto_depIdxs,
		MessageInfos:      file_cloudprovider_aws_proto_msgTypes,
	}.Build()
	File_cloudprovider_aws_proto = out.File
	file_cloudprovider_aws_proto_rawDesc = nil
	file_cloudprovider_aws_proto_goTypes = nil
	file_cloudprovider_aws_proto_depIdxs = nil
}
